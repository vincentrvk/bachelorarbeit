Du sollst ein Skript für die Integration von S4/HANA mit ICI (Buy Side). Es sollen Business Partner in ICI importiert werden. 

1. Header, Properties und Body
--------------------
Headers:

Properties:
requestUser = 
requestPassword = 
requestURL = 
RecipientBusinessSystemID_config = Icertis_BUY
RecipientBusinessSystemID_payload = //RecipientBusinessSystemID
SenderBusinessSystemID = //SenderBusinessSystemID

Für jeden BusinessPartner einzeln:
SupplierCode = //InternalID


Sollten Properties und Header bereits im Message-Objekt vorhanden sein, befülle die Variablen mit den vorhandenen Werten. Ist ein Wert nicht zu finden benutze "placeholder".


2. Eingehenden Payload speichern:
-------------------------------
- Speichere den eingehenden Payload für die spätere Verarbeitung


3. Splitter für Business Partner
------------------------
- Vom eingehenden Payload ausgehend
- Filtere den Payload für das "BusinessPartner"-Tag und verarbeite jeden Business Partner einzeln


4. Filter InternalID:
----------------------------
- Validiere die Business Partner gemäß den Validierungsregeln


5. Request "Check if Business Partner exists":
-----------------
Adresse: ${property.requestURL}
Methode: GET
Authentifizierung: Basic-Authentication
Header: keine
Query: ${property.SupplierCode}
Body: keiner

Response Handling: 
- Wenn der eingehende Body kein BusinessPartner-Objekt enthält, existiert das Produkt nicht -> CREATE
- Wenn der eingehende Body ein BusinessPartner-Objekt enthält, existiert das Produkt -> UPDATE
- Entscheide hiernach welchen der folgenden beiden Requests benutzt wird (Schritte 6a oder 6b)


6a. Request "UPDATE Business Partner":
-----------------
Adresse: ${property.requestURL}/Update
Methode: POST
Authentifizierung: Basic-Authentication
Header: keine
Body: Payload nach Request-Mapping Business Partner

Response Handling: 
- kein Response Handling


6b. Request "CREATE Business Partner":
-----------------
Adresse: ${property.requestURL}/Create
Methode: POST
Authentifizierung: Basic-Authentication
Header: keine
Body: Payload nach Request-Mapping Business Partner

Response Handling: 
- kein Response Handling


7. Request "Set Active Status":
-----------------
Adresse: ${property.requestURL}/${property.SupplierCode}/Activate
Methode: POST
Authentifizierung: Basic-Authentication
Header: keine
Body: Payload nach Request-Mapping Product

Response Handling: 
- kein Response Handling


8. Splitter für Adressen
------------------------
- Vom eingehenden Payload ausgehend
- Filtere den Payload für das "AddressInformation"-Tag und verarbeite jede Adresse einzeln
- Erstelle die Property "AddressUUID" mit dem Wert AddressInformation/UUID


9. Request "Check if Business Partner Adresse exists": 
-----------------
Adresse: ${property.requestURL}
Methode: GET
Authentifizierung: Basic-Authentication
Header: keine
Query: ${property.AddressUUID}
Body: keiner

Response Handling: 
- Wenn der eingehende Body kein AddressInformation-Objekt enthält, existiert das Werk nicht -> CREATE
- Wenn der eingehende Body ein AddressInformation-Objekt enthält, existiert das Werk -> UPDATE
- Entscheide hiernach welchen der folgenden beiden Requests benutzt wird (Schritte 10a oder 10b)


10a. Request "UPDATE Address":
-----------------
Adresse: ${property.requestURL}/UpdateAddress
Methode: POST
Authentifizierung: Basic-Authentication
Header: keine
Body: Payload nach Request-Mapping Address

Response Handling: 
- kein Response Handling


10b. Request "CREATE Address":
-----------------
Adresse: ${property.requestURL}/CreateAddress
Methode: POST
Authentifizierung: Basic-Authentication
Header: keine
Body: Payload nach Request-Mapping Address

Response Handling: 
- kein Response Handling


11. Logging:
------------
- Logge den Payload in folgenden Fällen als Attachment String
	- vor jeder Request
	- nach jeder Request
	- nach jedem Mapping
	- vor jedem Mapping



Modularität-Anforderungen:
1. Schreibe eine separate Funktion für jeden API-Call
2. Schreibe eine separate Funktion für das Mapping
3. Schreibe eine separate Funktion zum festlegen der Werte (Headers & Properties)
4. Schreibe eine separate Funktion für das Error Handling
5. Schreibe eine separate Funktion für das Logging


Validierungsregeln:
- Es werden nur Business Partner mit InternalID höher als 999 verarbeitet (z.B. 1500, 1000)
- Ist kein Business Partner mit InternalID höher als 999 vorhanden, wirf einen Fehler


Mapping-Anforderungen:
REQUEST-MAPPING (Business Partner): 
Quellfeld -> Zielfeld
XML -> JSON

/BusinessPartner/InternalID -> Data.ICMExternalId

/BusinessPartner/Common/Person/Name/GivenName, /BusinessPartner/Common/Person/Name/FamilyName, /BusinessPartner/Common/Organisation/Name/FirstLineName -> Data.Name
Transformationsregel: 
- Wenn FamilyName leer oder null ist, nutze FirstLineName als Zielwert
- Wenn FamilyName einen Wert hat, konkatiniere GivenName und FamilyName als Zielwert (ohne Delimiter)
- Erstelle für den Zielwert zusätzlich eine neue Property: "SupplierName"

${property.SenderBusinessSystemID} -> Data.ICMExternalSourceSystem

/BusinessPartner/Common/DeletedIndicator -> Data.isActive
Transformationsregel:
- Negiere den eingehenden Boolean (z.B. "true" -> "false")
- Case insensitive

/BusinessPartner/Role/RoleCode -> Data.syncRequired


REQUEST-MAPPING (Address): 
Quellfeld -> Zielfeld
XML -> JSON

/AddressInformation/UUID -> Data.ICMExternalId

${property.SupplierCode} -> Data.ICMICISupplierCode.DisplayValue

${property.SenderBusinessSystemID} -> Data.ICMExternalSourceSystem

${property.SupplierName} -> Data.Name

/AddressInformation/Address/PostalAddress/HouseID -> Data.ICMAddressLine1



RESPONSE-MAPPING:
Quellfeld -> Zielfeld
keins


---
Input:
FLOW INPUT:
<BusinessPartnerSUITEBulkReplicateRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <MessageHeader>
    <SenderBusinessSystemID>SYSTEM_XYZ</SenderBusinessSystemID>
  </MessageHeader>
  <BusinessPartner>
    <UUID>123e4567-e89b-12d3-a456-426614174000</UUID>
    <InternalID>1001</InternalID>
    <DeletedIndicator>false</DeletedIndicator>
    <Common>
      <DeletedIndicator>false</DeletedIndicator>
      <Person>
        <Name>
          <GivenName>Max</GivenName>
          <FamilyName>Mustermann</FamilyName>
        </Name>
      </Person>
      <Organisation>
        <Name>
          <FirstLineName>Beispiel GmbH</FirstLineName>
        </Name>
      </Organisation>
    </Common>
    <AddressInformation>
      <UUID>address-001</UUID>
      <Address>
        <PostalAddress>
          <HouseID>42A</HouseID>
        </PostalAddress>
      </Address>
    </AddressInformation>
    <Role>
      <RoleCode>ZCUST</RoleCode>
    </Role>
  </BusinessPartner>
</BusinessPartnerSUITEBulkReplicateRequest>



INPUT REQUEST MAPPING (Business Partner):
<BusinessPartner>
    <UUID>123e4567-e89b-12d3-a456-426614174000</UUID>
    <InternalID>1001</InternalID>
    <DeletedIndicator>false</DeletedIndicator>
    <Common>
      <DeletedIndicator>false</DeletedIndicator>
      <Person>
        <Name>
          <GivenName>Max</GivenName>
          <FamilyName>Mustermann</FamilyName>
        </Name>
      </Person>
      <Organisation>
        <Name>
          <FirstLineName>Beispiel GmbH</FirstLineName>
        </Name>
      </Organisation>
    </Common>
    <AddressInformation>
      <UUID>address-001</UUID>
      <Address>
        <PostalAddress>
          <HouseID>42A</HouseID>
        </PostalAddress>
      </Address>
    </AddressInformation>
    <Role>
      <RoleCode>ZCUST</RoleCode>
    </Role>
  </BusinessPartner>


INPUT REQUEST MAPPING (Address):
<AddressInformation>
	<UUID>address-001</UUID>
	<Address>
		<PostalAddress>
			<HouseID>42A</HouseID>
		</PostalAddress>
	</Address>
</AddressInformation>



INPUT RESPONSE MAPPING:
keins



Input-Schema:
FLOW INPUT SCHEMA:
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">
  <xs:element name="BusinessPartnerSUITEBulkReplicateRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="MessageHeader" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="SenderBusinessSystemID" type="xs:string" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="BusinessPartner" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="UUID" type="xs:string" minOccurs="0"/>
              <xs:element name="InternalID" type="xs:unsignedShort" minOccurs="0"/>
              <xs:element name="DeletedIndicator" type="xs:boolean" minOccurs="0"/>
              <xs:element name="Common" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="DeletedIndicator" type="xs:boolean" minOccurs="0"/>
                    <xs:element name="Person" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Name" minOccurs="0">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="GivenName" type="xs:string" minOccurs="0"/>
                                <xs:element name="FamilyName" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Organisation" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Name" minOccurs="0">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="FirstLineName" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="AddressInformation" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="UUID" type="xs:string" minOccurs="0"/>
                    <xs:element name="Address" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="PostalAddress" minOccurs="0">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="HouseID" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Role" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="RoleCode" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>



INPUT SCHEMA REQUEST MAPPING (Business Partner):
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">
  <xs:element name="BusinessPartner">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="UUID" type="xs:string"/>
        <xs:element name="InternalID" type="xs:string"/>
        <xs:element name="DeletedIndicator" type="xs:boolean"/>
        <xs:element name="Common">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="DeletedIndicator" type="xs:boolean"/>
              <xs:element name="Person">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Name">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="GivenName" type="xs:string"/>
                          <xs:element name="FamilyName" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Organisation">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Name">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="FirstLineName" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="AddressInformation">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="UUID" type="xs:string"/>
              <xs:element name="Address">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="PostalAddress">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="HouseID" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Role">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="RoleCode" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
	</xs:sequence>
   </xs:complexType>
</xs:element>
</xs:schema>



INPUT SCHEMA REQUEST MAPPING (Address):
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">
  <xs:element name="AddressInformation">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="UUID" type="xs:string"/>
        <xs:element name="Address">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PostalAddress">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HouseID" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>





INPUT SCHEMA RESPONSE MAPPING:
keins




Output: 
OUTPUT REQUEST MAPPING (Business Partner):
{
  "Data": {
    "ICMExternalId": "1001",
    "Name": "MaxMustermann",
    "ICMExternalSourceSystem": "SYSTEM_XYZ",
    "isActive": "true",
    "syncRequired": ["Yes"]
  }
}




OUTPUT REQUEST MAPPING (Address):
{
  "Data": {
    "ICMExternalId": "address-001",
    "Name": "MaxMustermann",
    "ICMAddressLine1": "42A",
    "ICMExternalSourceSystem": "SYSTEM_XYZ",
    "ICMCountryCode": {
      "DisplayValue": "DE"
    },
    "ICMICISupplierCode": {
      "DisplayValue": "1001"
    }
  }
}




OUTPUT RESPONSE MAPPING:
keins





Output Schema:
OUTPUT SCHEMA REQUEST MAPPING (Business Partner):
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "properties": {
    "Data": {
      "type": "object",
      "properties": {
        "ICMExternalId": {
          "type": "string",
          "format": "uuid"
        },
        "Name": {
          "type": "string"
        },
        "ICMExternalSourceSystem": {
          "type": "string"
        },
        "isActive": {
          "type": "string",
          "enum": ["true", "false"]
        },
        "syncRequired": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "ICMExternalId",
        "Name",
        "ICMExternalSourceSystem",
        "isActive",
        "syncRequired"
      ],
      "additionalProperties": false
    }
  },
  "required": ["Data"],
  "additionalProperties": false
}







OUTPUT SCHEMA REQUEST MAPPING (Address):
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "properties": {
    "Data": {
      "type": "object",
      "properties": {
        "ICMExternalId": {
          "type": "string",
          "format": "uuid"
        },
        "Name": {
          "type": "string"
        },
        "ICMAddressLine1": {
          "type": "string"
        },
        "ICMExternalSourceSystem": {
          "type": "string"
        },
        "ICMCountryCode": {
          "type": "object",
          "properties": {
            "DisplayValue": {
              "type": "string"
            }
          },
          "required": ["DisplayValue"],
          "additionalProperties": false
        },
        "ICMICISupplierCode": {
          "type": "object",
          "properties": {
            "DisplayValue": {
              "type": "string"
            }
          },
          "required": ["DisplayValue"],
          "additionalProperties": false
        }
      },
      "required": [
        "ICMExternalId",
        "Name",
        "ICMAddressLine1",
        "ICMExternalSourceSystem",
        "ICMCountryCode",
        "ICMICISupplierCode"
      ],
      "additionalProperties": false
    }
  },
  "required": ["Data"],
  "additionalProperties": false
}






OUTPUT SCHEMA RESPONSE MAPPING:
keins



